
- proper cleaning of tmpdirs on the host system ?

- get rid of testout_fobj, replace it iwth testout_fd
  - and os.open() in .start() / os.close() in .stop()
  - have some reporter function to close it manually, close_testout()
    - and call it from executor after doing Popen, to avoid opened fd hanging around
      in the main python process when we don't need it
  - make sure to open with O_WRONLY | O_CREAT | O_APPEND, so reconnects don't override the log
  - verify by 'ls -l /proc/$pyproc/fd' to ensure there are no .../testout.temp fds open

- test special cases; ie.

  - Executor running test and the remote loses connection
    (ie. iptables -I INPUT 1 -j DROP)

  - ssh after reboot doesn't actually work (ssh.ConnectError)
    - might need generalization of all Connection exceptions
    - does the test result get saved anywhere? .. as 'infra' ?

    - are non-0 exit codes and exceptions raised by orchestrator, like
        atex: unexpected exception happened while running ...
      logged anywhere aside from ./contest.py stderr?

  - raise non-0 exit code and unexpected exceptions to util.warning

- contest bug?, reporting log with full path
  - :238: PASS / [report.html, scan-arf.xml.gz, /var/lib/libvirt/images/contest-osbuild.txt]
  - does it upload correctly with name: contest-osbuild.txt ?

- priority system for contest
  - 'extra-priority' or something like that
  - run problematic tests (ie. image-builder) first, so they can
    rerun while others run

- per-test rerun counts ('extra-reruns')
  - root-level main.fmf could set it to 1, except RHEL-10 (because OpenGPG dnf bug) to 3
  - image-builder test could set it to 5

- make it python3.12 (RHEL-10) compatible, ideally 3.11 (RHEL-9)

- in the CLI tool (for contest), block further SIGINT/SIGTERM
  while already running cleanup (regular one, not induced by ctrl-c)

  - got hit by this in podman provision; 'podman container rm -t 0 -f'
    was already removing a container (waiting for kill) when the user
    issued SIGINT and it killed the 'rm', leaving container behind

- interactive mode for Executor (without redirecting stderr to file,
  and with stdin routed through)

- appending to a previous results.json.gz + files_dir
  - gzip should be able to append a new gz header, and we can reuse a files_dir easily
  - maybe append=False param for Orchestrator/Aggregator that would
    - return error if False and one of the two exists
    - append to them if True
  - add test for it

- more tests
  - testcontrol (incl. reporting many results)
    - incl. reporting after reboot
  - testingfarm API directly
    - API functions
    - class Request
    - class Reserve + manual use by ssh(1), see tf.py
  - ssh connection tests (both Standalone and Managed) using
    systemd-based podman container (PodmanProvisioner with extra run opts)
  - reporter (part of executor)
  - executor
    - incl. corner cases (see above)
    - shared_dir across multiple parallel Executor instances
    - reboot
      - partial results preserved across reboots
      - disconnect without requested reconnect --> error
      - etc.
  - aggregators
  - orchestrator
    - incl. corner cases like setup failing and being retried
  - provisioners (see TODO at the end of shared.py)
    - start() and stop()
    - stop_defer()
  - testingfarm simple sanity reserve for centos stream 8 9 10
    - to catch distro-specific bugs

- clarify, in docstrings for API definitions, what functions may block
  and which ones may be run in different threads
- properly document which parts of various APIs need to be thread safe,
  which functions are safe, which are not

- demo examples
  - parallel Executors on one system with multiple Connections
  - Aggregator in append=True mode, re-running tests that never finished
    (building up excludes=[] from finished results.json.gz)
  - image mode, implemented as additional run_setup() Orchestrator hook,
    that collects required packages from all to_run tests, installs them,
    does bootc switch, and that's it
  - additional waiving logic on aggregated JSON results, before rendering
    HTML

- formalize coding style in some Markdown doc
  - mention that class member variables and functions that are for internal
    use only (private) start with _ (underscore), everything else is considered
    public, incl. attributes / variables
    - TODO: actually revise the codebase, applying this

- mention in Orchestrator documentation that it is explicitly about running
  tests on **ONE** platform (string)

- reevaluate which func helpers (ie. _private_helper()) make sense on a module
  level vs inside a class

- document that Connection MUST use some subprocess-style commands
  for cmd and rsync, and support func=
  - because Executor uses func=Popen to run a test in the background

- probably rename ManagedSSHConn -> ManagedSSHConnection
  - for all Conn classes

- atex tf sr
  - make --state optional, have it be action='append'
  - have the default --state be all non-end states and print '(running)' or '(queued)'
    etc. on each line

- remove Provisioner.stop_defer(), have just a blocking .stop() that may internally
  paralelize resource releasing if necessary
  - stop_defer() made sense for TF and other state-less releases, but doesn't for
    libvirt, which needs to release all first, and *then* close the connection
- give .stop() a block=True/False similar to Remote.release(block=True/False)
  - "just stop/release it in the background, I don't care about return"
  - useful when calling .stop() on many Provisioners from the main program
  - these should be daemon=False threads; to make sure they finish before exit

- libvirt - destroy the domain on release
  - takes a bit extra time, but is better for "hygiene" on our vmhosts

- add timeouts to subprocess.run() calling rsync
  - both contest in executor.py and content in productization

- check the ssh key argument for TF reserve, turn it to absolute path internally
  (ssh needs that)

- generalize Executor
  - and rename setup()/cleanup() to start()/stop() to make it standard across all classes
